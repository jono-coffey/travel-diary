/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Entry: { // root type
    description?: string | null; // String
    destination: string; // String!
    id: number; // Int!
    latitude: number; // Float!
    longitude: number; // Float!
  }
  Mutation: {};
  Query: {};
  Trip: { // root type
    endDate: number; // Float!
    id: number; // Int!
    name: string; // String!
    startDate: number; // Float!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Entry: { // field return type
    createdBy: NexusGenRootTypes['User'] | null; // User
    description: string | null; // String
    destination: string; // String!
    id: number; // Int!
    latitude: number; // Float!
    longitude: number; // Float!
    trip: NexusGenRootTypes['Trip'] | null; // Trip
  }
  Mutation: { // field return type
    deleteEntry: NexusGenRootTypes['Entry'] | null; // Entry
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    newEntry: NexusGenRootTypes['Entry']; // Entry!
    newTrip: NexusGenRootTypes['Trip']; // Trip!
    signUp: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateEntry: NexusGenRootTypes['Entry'] | null; // Entry
  }
  Query: { // field return type
    currentUser: NexusGenRootTypes['User'] | null; // User
    entries: NexusGenRootTypes['Entry'][]; // [Entry!]!
    trips: NexusGenRootTypes['Trip'][]; // [Trip!]!
  }
  Trip: { // field return type
    createdBy: NexusGenRootTypes['User'] | null; // User
    endDate: number; // Float!
    entries: NexusGenRootTypes['Entry'][]; // [Entry!]!
    id: number; // Int!
    name: string; // String!
    startDate: number; // Float!
  }
  User: { // field return type
    email: string; // String!
    entries: NexusGenRootTypes['Entry'][]; // [Entry!]!
    id: number; // Int!
    trips: NexusGenRootTypes['Trip'][]; // [Trip!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Entry: { // field return type name
    createdBy: 'User'
    description: 'String'
    destination: 'String'
    id: 'Int'
    latitude: 'Float'
    longitude: 'Float'
    trip: 'Trip'
  }
  Mutation: { // field return type name
    deleteEntry: 'Entry'
    login: 'AuthPayload'
    newEntry: 'Entry'
    newTrip: 'Trip'
    signUp: 'AuthPayload'
    updateEntry: 'Entry'
  }
  Query: { // field return type name
    currentUser: 'User'
    entries: 'Entry'
    trips: 'Trip'
  }
  Trip: { // field return type name
    createdBy: 'User'
    endDate: 'Float'
    entries: 'Entry'
    id: 'Int'
    name: 'String'
    startDate: 'Float'
  }
  User: { // field return type name
    email: 'String'
    entries: 'Entry'
    id: 'Int'
    trips: 'Trip'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteEntry: { // args
      id: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    newEntry: { // args
      description?: string | null; // String
      destination: string; // String!
      latitude: number; // Float!
      longitude: number; // Float!
      tripId?: number | null; // Int
    }
    newTrip: { // args
      endDate: number; // Float!
      name: string; // String!
      startDate: number; // Float!
    }
    signUp: { // args
      email: string; // String!
      password: string; // String!
    }
    updateEntry: { // args
      description?: string | null; // String
      destination?: string | null; // String
      id: number; // Int!
      latitude?: number | null; // Float
      longitude?: number | null; // Float
      tripId?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}